[
  {
    "objectID": "Homework6.html",
    "href": "Homework6.html",
    "title": "Homework6",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\n\nThe lapply() is a vectorized approach that lets us apply a function across the elements of a list more efficiently than if we used for loops. The equivalent purrr function is the map() function.\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply()\n\nWe need to remember that we specify the additional args for the function in lapply() differently than we would for normal functions. The code would be:\nlapply(my_list, cor, method = “kendall”)\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\nPurrr is tidyverse compatible and more consistent than the apply() family packages. It also can save a few keystrokes to accomplish the same outcomes in apply().\n\nWhat is a side-effect function?\n\nA side-effect function is a function that prints out some output without changing the incoming data. This is different from transformation functions, which changes the incoming data in some way.\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\nWe can use the same variable names across these functions because of R’s lexical scoping. Functions will each have their own function environment, separate from the global environment. Since these function environments are removed after the function executes, there will be no conflict between different functions with the same variable names."
  },
  {
    "objectID": "Homework6.html#task-1-conceptual-questions",
    "href": "Homework6.html#task-1-conceptual-questions",
    "title": "Homework6",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\n\nThe lapply() is a vectorized approach that lets us apply a function across the elements of a list more efficiently than if we used for loops. The equivalent purrr function is the map() function.\n\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below! (I’m really trying to ask you how you specify method = “kendall” when calling lapply()\n\nWe need to remember that we specify the additional args for the function in lapply() differently than we would for normal functions. The code would be:\nlapply(my_list, cor, method = “kendall”)\n\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\nPurrr is tidyverse compatible and more consistent than the apply() family packages. It also can save a few keystrokes to accomplish the same outcomes in apply().\n\nWhat is a side-effect function?\n\nA side-effect function is a function that prints out some output without changing the incoming data. This is different from transformation functions, which changes the incoming data in some way.\n\nWhy can you name a variable sd in a function and not cause any issues with the sd function?\n\nWe can use the same variable names across these functions because of R’s lexical scoping. Functions will each have their own function environment, separate from the global environment. Since these function environments are removed after the function executes, there will be no conflict between different functions with the same variable names."
  },
  {
    "objectID": "Homework6.html#task-2-writing-r-functions",
    "href": "Homework6.html#task-2-writing-r-functions",
    "title": "Homework6",
    "section": "Task 2: Writing R Functions",
    "text": "Task 2: Writing R Functions\n\nWrite a function to calculate RMSE from a vector of responses and return a vector of predictions. Allow for extra arguments for missing values to be sent to the internal mean() function.\n\n\ngetRMSE = function(y_rep, y_pred, ...){\n  n = length(y_rep)\n  mean = sqrt((mean(y_rep - y_pred, ...)^2)/n)\n  return(mean)\n  }\n\n\nNow we can test the code:\n\n\n# generate data\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\ngetRMSE(resp,pred) # pretty small error!\n\n[1] 9.636992e-17\n\n\nAnd let’s do it again after replacing two values with NA_real_:\n\nresp[2] = NA_real_\nresp[1] = NA_real_\ngetRMSE(resp, pred, na.rm = FALSE)\n\n[1] NA\n\ngetRMSE(resp, pred, na.rm = TRUE)\n\n[1] 0.0008101978\n\n\nWe see that we have successfully managed to get the na.rm arg fed into our mean function within our getRMSE function!\n\nNow we set up a function for MAE:\n\n\ngetMAE = function(y_rep, y_pred, ...){\n  n = length(y_rep)\n  mean = (mean(abs(y_rep - y_pred), ...))/n\n  return(mean)\n  }\n\n\nNow we test this one too:\n\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\ngetMAE(resp,pred)\n\n[1] 0.008155776\n\n\nAnd now we test after replacing values with NA_real_:\n\nresp[2] = NA_real_\nresp[1] = NA_real_\ngetRMSE(resp, pred, na.rm = FALSE)\n\n[1] NA\n\ngetRMSE(resp, pred, na.rm = TRUE)\n\n[1] 0.0008101978\n\n\nSweet, that one works too!\n\nNow, we’ll create a wrapper function where we can call one or both of our above error measurements. Return them with appropriate names:\n\n\nerrorCalc = function(y_rep, y_pred, fun = c('MAE','RMSE'), ...){\n  r = list() # initialize empty return vector\n  if (is.vector(y_rep) & is.numeric(y_rep)){\n    if (is.vector(y_pred) & is.numeric(y_pred)){\n      if (\"MAE\" %in% fun){\n       MAE = getMAE(y_rep, y_pred, ...)\n       r = append(r, paste(\"MAE =\", MAE))\n       }\n      if(\"RMSE\" %in% fun){\n        RMSE = getRMSE(y_rep, y_pred, ...)\n        r = append(r,paste(\"RMSE =\", RMSE))\n      }\n      }else {\n      stop(\"Make sure predicted y is numeric vector\")\n    } \n  } else {\n      stop(\"Make sure response y is numeric vector\")\n  } \n  return(unlist(r)) # if we plan to use this programatically in the future, we will\n                    # need to change this output, but unlist() works well here!\n}\n\nNow we test our function:\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nerrorCalc(resp, pred) # with default, both error types\n\n[1] \"MAE = 0.00815577593682669\"   \"RMSE = 9.63699199650961e-17\"\n\nerrorCalc(resp, pred, \"MAE\")  # with just MAE\n\n[1] \"MAE = 0.00815577593682669\"\n\nerrorCalc(resp, pred, \"RMSE\") # and just RMSE\n\n[1] \"RMSE = 9.63699199650961e-17\"\n\n\nExcellent, the wrapper function is working! Now let’s test what happens when we replace NA values in the data:\n\nresp[2] = NA_real_\nresp[1] = NA_real_\nerrorCalc(resp, pred, na.rm = FALSE)\n\n[1] \"MAE = NA\"  \"RMSE = NA\"\n\nerrorCalc(resp, pred, na.rm = TRUE)\n\n[1] \"MAE = 0.00824120056659464\"  \"RMSE = 0.00081019777106054\"\n\n\nAnd finally, let’s see what happens when we make the response data into a data frame instead of a vector:\n\n# let's make the response into a df and see what happens\ndf_resp = data.frame(resp)\n#errorCalc(df_resp, pred, na.rm = TRUE)\n\nOur error response worked as intended! I needed to comment the error-producing line of code, so that the quarto document would render appropriately. In order to observe the error message, simply un-comment the last line in the code chunk above.\nThis concludes our testing of this function. Now we can move onto the API task."
  },
  {
    "objectID": "Homework6.html#task-3-querying-api-tidyverse-style-function",
    "href": "Homework6.html#task-3-querying-api-tidyverse-style-function",
    "title": "Homework6",
    "section": "Task 3: Querying API & Tidyverse-style function",
    "text": "Task 3: Querying API & Tidyverse-style function\nWe’ll query the News API for the next part of the HW:\n\n# grab the libraries we'll need first\nlibrary(httr)\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nlibrary(jsonlite)\n\nWarning: package 'jsonlite' was built under R version 4.3.3\n\nlibrary(purrr)\n\n\nAttaching package: 'purrr'\n\n\nThe following object is masked from 'package:jsonlite':\n\n    flatten\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nAnd now we can run a query:\n\n# we'll start by grabbing some recent headlines about regeneration - hopefully we find some cool science articles!\nd = httr::GET(\"https://newsapi.org/v2/everything?q=regeneration&from=2024-10-08&to=2024-10-08&sortBy=popularity&apiKey=3c0a9ab17b4e4c33b26c125d12de76c6\")\nnews = fromJSON(rawToChar(d$content))  # convert to json\narticles = pluck(news$articles) # use pluck to get the articles into a df\n\nnrow(articles) # cool, we now have 36 articles! Some are removed, but still some good info here\n\n[1] 36\n\n\n\nNext, we’ll write a function to let us easily query the API:\n\n\nnewsQuery = function(subj = \"regeneration\", date = \"2024-10-08\", key= \"3c0a9ab17b4e4c33b26c125d12de76c6\"){ # we'll set some defaults above\napi_url = as.character(paste(\"https://newsapi.org/v2/everything?q=\", subj, \"&from=\",date,\"&to=2024-10-13&sortBy=popularity&apiKey=\",key, sep=''))\nd = GET(api_url)\nnews = fromJSON(rawToChar(d$content)) \narticles = pluck(news$articles)\nreturn(articles)\n}\n\nNow we let a user specify their subject, from date (up to present), and their key. First, let’s make a one-way contigency table of a search’s sources:\n\nart = newsQuery(subj = \"regeneration\", date = \"2024-10-10\", key = \"3c0a9ab17b4e4c33b26c125d12de76c6\") # get articles about regeneration \nart2 = newsQuery(subj = \"penguins\", date = \"2024-10-10\", key = \"3c0a9ab17b4e4c33b26c125d12de76c6\") # get articles about penguins - penguins are awesome\nsources = art$source$name # grab source names for first search (regeneration)\ntable(sources) # make contingency table\n\nsources\n                                         [Removed] \n                                                 1 \n                                    Antaranews.com \n                                                 1 \n                                         ArchDaily \n                                                 1 \n                                     Atlas Obscura \n                                                 1 \n                                              Bild \n                                                 1 \n                                    Bluetracker.gg \n                                                 4 \n                                         Brit + Co \n                                                 1 \n                                 Business Standard \n                                                 1 \n                            Catholicnewsagency.com \n                                                 1 \n                                      Challies.com \n                                                 1 \n                                Citydigestnews.com \n                                                 1 \n                            Courrier International \n                                                 1 \n                                   Desiringgod.org \n                                                 2 \n                                            Dezeen \n                                                 1 \n                                         Earth.com \n                                                 1 \n                                 Elifesciences.org \n                                                 1 \n                            Erickimphotography.com \n                                                 1 \n                                    ETF Daily News \n                                                 5 \n                                             Focus \n                                                 1 \n                                            Forbes \n                                                 2 \n                                  Freerepublic.com \n                                                 1 \n                                       GamesRadar+ \n                                                 1 \n                                     GlobeNewswire \n                                                 2 \nHarvard School of Engineering and Applied Sciences \n                                                 1 \n                                    Independent.ie \n                                                 1 \n                                    just-style.com \n                                                 1 \n                                            kicker \n                                                 3 \n                                   Lewrockwell.com \n                                                 2 \n                                        Lithub.com \n                                                 1 \n                               National Geographic \n                                                 1 \n                                         New Atlas \n                                                 2 \n                                New Zealand Herald \n                                                 1 \n                                          Observer \n                                                 1 \n                                          Phys.Org \n                                                 1 \n                                          Plos.org \n                                                 1 \n                        Royal Society of Chemistry \n                                                 1 \n                                       Screen Rant \n                                                 1 \n                                        Seths.blog \n                                                 1 \n                                      STLtoday.com \n                                                 1 \n                           The Conversation Africa \n                                                 1 \n                            The National Interest  \n                                                 1 \n                                         The Punch \n                                                 1 \n                                Theaviationist.com \n                                                 1 \n                                        Www.gov.uk \n                                                 2 \n                                        Www.nzz.ch \n                                                 1 \n\n\nWe can see that a lot of sources only have one article on regeneration since the specified day, but some have multiple articles (such as ETF Daily Reader).\n\nNow, lets turn the publishedAt column into a data column with lubridate:\n\n\ntime1 = art$publishedAt\nart$publishedAt = ymd_hms(time1)\nart_sort = art[order(art$publishedAt),] # sort the first set of articles\nart_sort = art_sort |&gt;\n  mutate(pub_diffs = as.numeric(difftime(publishedAt, lag(publishedAt), units = 'mins')))\n\n# let's view the outcome to make sure this worked\nart_sort$pub_diffs\n\n [1]          NA   0.0000000   4.2500000   1.8833333 254.6166667  34.1500000\n [7]  33.8000000  60.2000000  16.7666667  14.9500000  59.4000000  82.9833333\n[13]  14.4500000  22.5500000  60.0000000   0.3833333  10.6166667  49.0000000\n[19] 120.0000000  10.9833333   0.9666667   9.5666667  42.6666667  55.5000000\n[25]  59.2166667  51.1666667  59.9333333  11.0833333 238.9166667 121.7166667\n[31]   0.0000000 268.0666667  30.2166667 120.0833333  62.9166667  51.1166667\n[37]   5.8833333   4.7000000  37.9666667  17.3333333  98.8000000  21.2000000\n[43]   5.5833333  14.8500000 156.5666667   4.3000000  29.8666667   0.6166667\n[49]  28.2166667 239.2666667 421.7333333 122.0500000 357.2666667  59.6833333\n[55]  44.9666667   0.0000000 131.4333333   3.6000000  30.0000000 195.0000000\n\n\nGreat, this worked just as intended! We could write a function to make this conversion happen, and then use that function on our second set of articles. However, since we are just doing demonstrations here, we will just run the same code again - we won’t lose much efficiency with this.\n\ntime2 = art2$publishedAt\nart2$publishedAt = ymd_hms(time2)\nart2_sort = art2[order(art2$publishedAt),] # sort the first set of articles\nart2_sort = art2_sort |&gt;\n  mutate(pub_diffs = as.numeric(difftime(publishedAt, lag(publishedAt), units = 'mins')))\n\n# let's view the outcome to make sure this worked\nart2_sort$pub_diffs\n\n [1]           NA   0.15000000 118.98333333   0.06666667   4.53333333\n [6]   5.03333333 108.30000000   2.83333333   3.56666667  21.80000000\n[11]  14.06666667   8.90000000   4.35000000  63.48333333   7.65000000\n[16]  64.35000000  16.00000000   3.28333333  17.76666667 107.95000000\n[21]  48.00000000  12.00000000  49.31666667 137.80000000 112.88333333\n[26]   8.51666667   0.00000000   2.46666667  26.01666667   3.30000000\n[31]  61.75000000  12.75000000  26.60000000  22.41666667  63.86666667\n[36]  47.45000000 129.96666667  20.80000000  59.33333333 228.63333333\n[41]   6.13333333  14.48333333   9.80000000  13.71666667  21.75000000\n[46]   2.18333333  54.96666667  58.06666667  72.86666667 112.16666667\n[51]  16.00000000   3.66666667  40.33333333  60.00000000  63.00000000\n[56]  34.90000000  48.75000000  33.35000000   7.15000000 151.11666667\n[61]  48.56666667  45.10000000  75.15000000  69.48333333   3.43333333\n[66]   2.36666667 158.63333333   4.98333333  61.01666667   1.00000000\n[71]   9.00000000 111.13333333  16.61666667  48.01666667  28.35000000\n[76] 131.46666667 227.41666667   9.21666667  53.78333333 117.23333333\n[81] 138.36666667  11.40000000  90.00000000  12.86666667  47.13333333\n[86]  14.41666667  35.58333333\n\n\nCool, now we have both our data frames with the intended outcome columns!\n\nLast but not least, now we will subset the dfs to return date versions of publishedAt and the pub_diff values. Then we will use map() to return mean, sd, and median of these columns using an anonymous function. We’ll repeat this for both dfs.\n\n\nd1 = art_sort |&gt;\n  select(\"publishedAt\", \"pub_diffs\")\nmap(d1, \\(x) list(mean = mean(x, na.rm=TRUE),median = median(x, na.rm=TRUE),sd = sd(x, na.rm=TRUE)))\n\n$publishedAt\n$publishedAt$mean\n[1] \"2024-10-11 03:32:58 UTC\"\n\n$publishedAt$median\n[1] \"2024-10-11 01:01:43 UTC\"\n\n$publishedAt$sd\n[1] 70894.67\n\n\n$pub_diffs\n$pub_diffs$mean\n[1] 68.89831\n\n$pub_diffs$median\n[1] 34.15\n\n$pub_diffs$sd\n[1] 91.10412\n\n\nFinally, we can do the same for the second data frame:\n\nd2 = art2_sort |&gt;\n  select(\"publishedAt\", \"pub_diffs\")\nmap(d2, \\(x) list(mean = mean(x, na.rm=TRUE),median = median(x, na.rm=TRUE),sd = sd(x, na.rm=TRUE)))\n\n$publishedAt\n$publishedAt$mean\n[1] \"2024-10-11 05:57:18 UTC\"\n\n$publishedAt$median\n[1] \"2024-10-11 04:38:00 UTC\"\n\n$publishedAt$sd\n[1] 72722.06\n\n\n$pub_diffs\n$pub_diffs$mean\n[1] 47.0124\n\n$pub_diffs$median\n[1] 27.475\n\n$pub_diffs$sd\n[1] 50.64929\n\n\nWe can see that our second query (Penguins) had shorted intervals between uploads over the past three days. This may be due to sporting events related to the Pittsburgh Penguins. We also see that taking the SD of the lubridate object does not yield a result in the same format as the other entries. This likely is the SD in seconds, although we’d need to explore the documentation and do some testing to ensure that we are able to appropriately interpret this value."
  }
]